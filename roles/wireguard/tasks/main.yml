---
#

- name: Create /etc/wireguard directory
  file:
    path: "{{ wireguard_path }}"
    state: directory
    owner: root
    group: root
    mode: 0600

- name: Determine the running kernel release
  command: uname -r
  register: kernel_release

- name: Install the WireGuard packages
  become: yes
  apt:
    package:
      - wireguard-dkms
      - wireguard-tools
      - linux-headers-{{ kernel_release.stdout }}
      - linux-headers-generic
      - wireguard

- name: Generate private key
  shell: "wg genkey"
  register: wireguard_private_key_shell
  changed_when: False

- name: Store private key
  set_fact:
      wireguard_private_key: "{{ wireguard_private_key_shell.stdout }}"

- copy: content="{{ wireguard_private_key }}" dest="{{ wireguard_path}}/wg.key"

- name: Private key
  debug:
    msg: "{{ wireguard_private_key }}"

- name: Generate public key
  shell: "cat /etc/wireguard/wg.key | wg pubkey"
  register: wireguard_public_key_shell
  changed_when: False

- name: Store public key
  set_fact:
    wireguard_public_key: "{{ wireguard_public_key_shell.stdout }}"

- copy: content="{{ wireguard_public_key }}" dest="{{ wireguard_path}}/wg.pub"

- name: Public key
  debug:
    msg: "{{ wireguard_public_key }}"


- name: Enable net.ipv4.ip_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    reload: yes
    state: present

- name: Enable net.ipv4.conf.all.proxy_arp
  sysctl:
    name: net.ipv4.conf.all.proxy_arp
    value: 1
    reload: yes
    state: present

- name: Generate the wireguard configuration
  template:
    src: wireguard.conf.j2
    dest: "{{ wireguard_path }}/wg0.conf"
    owner: root
    group: root
    mode: 0600

- name: Enable reload-module-on-update to upgrade WireGuard without user confirmation
  file:
    path: "{{ wireguard_path }}/.reload-module-on-update"
    state: touch

- name: Reload WireGuard
  shell: "wg-quick down wg0 && wg-quick up wg0"
  ignore_errors: yes

